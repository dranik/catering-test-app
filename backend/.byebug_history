continue
flatten_email(letter).filter{|part| part.content_type.starts_with? 'text' }
flatten_email(letter).map(&:content_type).filter{|type| type.starts_with? 'text' }
flatten_email(letter).map(&:content_type).filter(&:starts_with?, 'text')
flatten_email(letter).map(&:content_type).filter(&:starts_with?)
flatten_email(letter).map(&:content_type).filter(&:starts_with)
flatten_email(letter).map(&:content_type).filter(&:starts_with=)
flatten_email(letter).map(&:content_type).filter(&:starts_with9
flatten_email(letter).map(&:content_type).filter(&:starts_with, 'text')
flatten_email(letter).map(&:content_type)
x.content_type
x.content_id
x.content-type
x.type
x.headers
x
x = flatten_email(letter).last
x.methods.headers
x.methods.header
x.methods.type
x.methods
x = flatten_email(letter).last
flatten_email(letter).last
flatten_email(letter).last.headers
flatten_email(letter).first.headers
flatten_email(letter).first
flatten_email(letter)
continue
flatten_email(letter).map(&:decoded)
continue
flatten_email(letter).map(&:decoded)
flatten_email(letter)[2].decoded
flatten_email(letter)[2]
flatten_email(letter)[1]
flatten_email(letter)[0]
flatten_email(letter).length[0]
flatten_email(letter).length
flatten_email(letter)
continue
flatten_email(letter).flatten.length
flatten_email(letter).flatten
flatten_email(letter).first
flatten_email(letter).last
flatten_email(letter).map(&:headers)
flatten_email(letter).map.headers
flatten_email(letter).count
flatten_email(letter)
continue
flatten_email letter
flatten_email
letter.parts.first.parts.first.parts.first.decoded
letter.parts.first.parts.first.parts.first
letter.parts.first.parts.first.decoded
letter.parts.first.parts
letter.parts.first.decoded
letter.parts
letter.multipart.parts
letter.multipart?
continue
params.require(:email).permit(:to, :cc, :bcc, :text).to_hash
params.require(:email).permit(:to, :cc, :bcc, :text)
continue
params
continue
params
continue
params["email"]
params[22]
params.to_json
params
